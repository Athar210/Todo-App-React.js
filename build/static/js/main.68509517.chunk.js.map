{"version":3,"sources":["config/firebase.js","App.jsx","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","addItem","state","value","alert","obj","title","database","ref","child","push","setState","todos","deleteItem","i","splice","editItem","val","edit","handleChange","e","target","updateItem","this","className","type","class","style","width","onChange","placeholder","onClick","map","v","key","id","label","variant","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAeiBA,G,YAAAA,gBAXI,CACjBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,kBCiFJC,G,wDAzFb,aAAc,IAAD,8BACX,gBAMFC,QAAU,WACR,GAAsB,KAAnB,EAAKC,MAAMC,MACZC,MAAM,mBAEJ,CACF,IAAIC,EAAM,CAACC,MAAM,EAAKJ,MAAMC,OAC9BZ,EAASgB,WAAWC,IAAI,KAAKC,MAAM,SAASC,KAAKL,GAClD,EAAKM,SAAS,CACXC,MAAM,GAAD,mBAAK,EAAKV,MAAMU,OAAhB,CAAsBP,IAC3BF,MAAO,OAhBE,EAsBbU,WAAa,SAACC,GACZ,EAAKZ,MAAMU,MAAMG,OAAOD,EAAE,GAC1B,EAAKH,SAAS,CACZC,MAAM,EAAKV,MAAMU,SAzBR,EA6BbI,SAAW,SAACF,EAAEG,GACZ,EAAKf,MAAMU,MAAME,GAAGI,MAAK,EACzB,EAAKP,SAAS,CACZC,MAAM,EAAKV,MAAMU,SAhCR,EAsCZO,aAAe,SAACC,EAAEN,GACjB,EAAKZ,MAAMU,MAAME,GAAGR,MAAQc,EAAEC,OAAOlB,MACrC,EAAKQ,SAAS,CACZC,MAAM,EAAKV,MAAMU,SAzCR,EA+CbU,WAAa,SAACR,GACZ,EAAKZ,MAAMU,MAAME,GAAGI,MAAK,EACzB,EAAKP,SAAS,CACZC,MAAM,EAAKV,MAAMU,SAhDnB,EAAKV,MAAM,CACTU,MAAM,GACNT,MAAM,IAJG,E,qDAyDJ,IAAD,SACYoB,KAAKrB,MAAlBU,EADC,EACDA,MAAMT,EADL,EACKA,MACX,OAEI,yBAAKqB,UAAU,OACb,4BAASC,KAAK,SAASC,MAAM,wBAAwBC,MAAuB,CAACC,MAAM,UAAnF,qBACA,6BAAK,6BAAK,6BAAK,6BAAK,6BACpB,2BAAOF,MAAM,MAAMvB,MAAOA,EAAO0B,SAAU,SAACT,GAAD,OAAM,EAAKT,SAAS,CAACR,MAAMiB,EAAEC,OAAOlB,SAASsB,KAAK,OAAOK,YAAY,eACpH,4BAAQL,KAAK,SAASC,MAAM,wBAAwBK,QAASR,KAAKtB,SAAlE,cACA,4BAGIW,EAAMoB,KAAI,SAACC,EAAEnB,GACX,OAAO,wBAAIoB,IAAKpB,GACbmB,EAAEf,KAAO,2BAAOiB,GAAG,iBAAiBC,MAAM,WAAWC,QAAQ,WAAWZ,KAAK,OAAOtB,MAAO8B,EAAE3B,MAAOuB,SAAU,SAACT,GAAD,OAAK,EAAKD,aAAaC,EAAEN,MAASmB,EAAE3B,MACtJ2B,EAAEf,KACH,4BAASO,KAAK,SAASC,MAAM,wBAAwBF,UAAU,OAAQO,QAAS,WAAK,EAAKT,WAAWR,KAArG,UAEA,4BAASW,KAAK,SAASC,MAAM,wBAAwBK,QAAS,kBAAK,EAAKf,SAASF,EAAEmB,EAAE3B,SAArF,QAEA,4BAASmB,KAAK,SAASC,MAAM,wBAAwBK,QAAS,kBAAK,EAAKlB,WAAWC,KAAnF,oB,GA9EQwB,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.68509517.chunk.js","sourcesContent":["import * as firebase from 'firebase/app'\r\nimport 'firebase/database'\r\nimport 'firebase/auth'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyD-GGRGPdePQ5QTgPjgoR1Nd8MD72uEt4U\",\r\n    authDomain: \"react1-6d12c.firebaseapp.com\",\r\n    databaseURL: \"https://react1-6d12c.firebaseio.com\",\r\n    projectId: \"react1-6d12c\",\r\n    storageBucket: \"react1-6d12c.appspot.com\",\r\n    messagingSenderId: \"693803219112\",\r\n    appId: \"1:693803219112:web:35418ffa5570a385df2a9d\",\r\n    measurementId: \"G-Z7F5BSGM0H\"\r\n  };\r\n  // Initialize Firebase\r\n  export default firebase.initializeApp(firebaseConfig);","import React, {Component} from 'react';\nimport firebase from './config/firebase';\nimport './style.css'\nclass App extends Component{\n  constructor(){\n    super()\n    this.state={\n      todos:[ ],\n      value:\"\"\n    }\n  }\n  addItem = () =>{\n    if(this.state.value===\"\"){\n      alert(\"Empty Field\")\n    }\n    else{\n      let obj = {title:this.state.value}\n    firebase.database().ref('/').child(\"todos\").push(obj)\n   this.setState({\n      todos:[...this.state.todos,obj],\n      value: ''\n    })\n    }\n    \n  }\n\n  deleteItem = (i) => {\n    this.state.todos.splice(i,1)\n    this.setState({\n      todos:this.state.todos\n    })\n  }\n\n  editItem = (i,val)=>{\n    this.state.todos[i].edit=true;\n    this.setState({\n      todos:this.state.todos\n    })\n   }\n\n\n   \n   handleChange = (e,i)=>{\n    this.state.todos[i].title = e.target.value;\n    this.setState({\n      todos:this.state.todos\n    })\n  }\n\n\n\n  updateItem = (i)=>{\n    this.state.todos[i].edit=false;\n    this.setState({\n      todos:this.state.todos\n    })\n   }\n\n\n\n\n  render(){\n    let {todos,value}=this.state;\n    return(\n            \n        <div className='wid'>\n          <button  type=\"button\" class=\"btn btn-outline-light\" style={{height:\"50px\"},{width:\"600px\"}} >TO DO APPLICATION</button>\n          <br/><br/><br/><br/><br/>          \n          <input class='inp' value={value} onChange={(e)=> this.setState({value:e.target.value})} type=\"text\" placeholder=\"Enter Item\" />\n      <button type=\"button\" class=\"btn btn-outline-light\" onClick={this.addItem}> ADD ITEM </button>\n      <ol>\n        {\n          \n          todos.map((v,i)=>{\n            return <li key={i} >\n              {v.edit?  <input id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\" type=\"text\" value={v.title} onChange={(e)=>this.handleChange(e,i)} /> : v.title} \n          {v.edit? \n          <button  type=\"button\" class=\"btn btn-outline-light\" className='btnn'  onClick={()=>{this.updateItem(i)} }>Update</button>\n          :\n          <button  type=\"button\" class=\"btn btn-outline-light\" onClick={()=> this.editItem(i,v.title)}>Edit</button>\n          }\n          <button  type=\"button\" class=\"btn btn-outline-light\" onClick={()=> this.deleteItem(i)}>Delete</button>\n          </li>})\n        }\n      </ol>\n\n      \n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}